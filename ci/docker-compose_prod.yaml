version: "3.8"

services:
  db:
    container_name: control_db
    image: postgres:14-bullseye
    restart: on-failure
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - control

  redis:
    container_name: control_redis
    image: redis:7-alpine
    restart: unless-stopped
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis_data_control:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - control

  app:
    container_name: control_app
    image: akafer/ins_control
    restart: on-failure
    ports:
      - "8500:8500"
    command: >
      bash -c "alembic upgrade head
      && python3 /app/src/scripts/create_user.py
      && python3 /app/src/run.py --port=8500"
    env_file:
      - ./.env
    volumes:
        - /var/www/ins_control/files/instructions:/app/src/static/instructions
        - /var/www/ins_control/files/signatures:/app/src/static/signatures
        - /var/www/ins_control/files/templates:/app/src/static/templates
        - /var/www/ins_control/files/training_modules:/app/src/static/training_modules
        - ./logs:/app/src/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - control

  nginx:
    container_name: control_nginx
    image: nginx:stable-alpine
    restart: on-failure
    ports:
      - "4000:4000"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
      - frontend
    networks:
      - control

  worker:
    container_name: control_worker
    image: akafer/ins_control
    restart: on-failure
    command: >
      bash -c "python3 /app/src/jobs/worker_t.py"
    env_file:
      - ./.env
    volumes:
      - ./files:/app/src/static
    depends_on:
      db:
        condition: service_healthy
    networks:
      - control

  frontend:
    container_name: control_frontend
    image: akafer/ins_control_frontend
    restart: on-failure
    env_file:
      - ./.env
    ports:
      - "3000:3000"
    depends_on:
      - app
    networks:
      - control

volumes:
  postgres_data:
  redis_data_control:

networks:
  control:
    driver: bridge
